package logic;

import data_structure.Heap;
import dijsktra.Map;

public class Car extends Thread {

	private Order[] currentOrders;
	private int value, nPacks, availablePack, oCount;
	private boolean isFull;
	private Map map;
	private Buffer buf;
	private Heap<Order> priorityQueue;
	private Order currentOrder;
	private int[] visitedCities;

	public Car(Parser p, Buffer b) {
		System.out.println("Powstal smochod");
		map = p.getMap();
		buf = b;
		priorityQueue = p.getHeap();
		nPacks = p.getNPackInCar();
		currentOrders = p.getOrdersList();
		oCount = p.getOrderAmount();
	}

	public Order findOrderByCity(int c) {
		Order tmp = null;
		for (int i = 0; i < oCount; i++) {
			if (buf.getOrder(i).getOrderCity() == c) {
				tmp = buf.getOrder(i);
				return tmp;
			}
		}
		return tmp;
	}

	public void run() {
		System.out.println("samochod wyruszyl");
		Order tmp = null;
		System.out.println("zordon");
		/*if ((currentOrder = priorityQueue.pop()) == null){
			System.out.println("Madafaka");
			return;
		}*/
		System.out.println("samochod jedzie");
		buf.put(currentOrder.getId());
		value = map.getShortestPath(currentOrder.getBaseCity(),
				currentOrder.getOrderCity());
		visitedCities = map.getVisitedCities();

		for (int i = 0; i < nPacks; i++) {
			if (map.getVCAL() - 2 == i) {
				break;
			}
			for (int j = map.getVCAL() - 1; j > 1; j--) {
				tmp = this.findOrderByCity(visitedCities[j]);
				if (buf.get(tmp.getId())) {
					buf.put(tmp.getId());
					this.currentOrders[i] = tmp;
					System.out.println("dodano paczke");
					break;
				}
			}

		}
	}

}
